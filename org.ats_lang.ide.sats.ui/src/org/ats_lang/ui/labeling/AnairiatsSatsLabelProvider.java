/*
 * generated by Xtext
 */
package org.ats_lang.ui.labeling;

import org.ats_lang.anairiatsSats.*;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

import com.google.inject.Inject;

/**
 * Provides labels for a EObjects.
 * 
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class AnairiatsSatsLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public AnairiatsSatsLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	String text(satprogram ele) {
		return "satprogram";
	}

	String text(d0ecseq_sta ele) {
		return "Program";
	}

	String text(d0ec_sta ele) {
		// m_d0ec=d0ec
		if (ele.getM_d0ec() != null) {
			return "d0ec";
		}
		
		// m_extcode=LITERAL_extcode
		if (ele.getM_extcode() != null) {
			return "extcode";
		}
		
		// m_sif=srpifkind m_guad=guad0ec_sta
		String sif = ele.getM_sif();
		if (sif != null) {
			return sif;
		}
		
		// SRPINCLUDE m_include=STRING
		if (ele.getM_include() != null) {
			return "#include";
		}
		
		// LOCAL m_local=d0ecseq_sta IN m_body=d0ecseq_sta END
		if (ele.getM_local() != null) {
			return "local";
		}
		
		dcstkind m_kind = ele.getM_kind();
		if (m_kind != null) {
			System.out.println("literal is " + m_kind.getLiteral());  // fun
			System.out.println("name is " + m_kind.getName());  // FUN
			System.out.println(m_kind.toString());  // fun
			
			refentity m_d0cstdec = ele.getName();
			return m_kind.toString() + " " + ((d0cstdec)m_d0cstdec).getName();
		}
		
		return "d0ec_sta";
	}

	String text(d0ecseq_sta_rev ele) {
		return "d0ecseq_sta_rev";
	}

	String text(dcstkind ele) {
		return ele.toString();
	}

	String text(d0ecargseq ele) {
		if (ele.getM_seq_t().isEmpty()) {
			return "template args: d0ecargseq";
		}
		else {
			return "template args: d0ecargseq";
		}
	}

	String text(d0cstdec ele) {
		EObject container = ele.eContainer().eContainer();
		if (container instanceof d0ec_sta) {
			String m_kind = ((d0ec_sta)container).getM_kind().toString();
//			System.out.println("========== " + container.toString());
			return m_kind + " " + ele.getName();	
		}
		return ele.getName();

	}

	String text(andd0cstdecseq ele) {
		return "andd0cstdecseq";
	}
	
	String text(guad0ec_sta ele) {
		return "guad0ec_sta";
	}
	
	String text(extnamopt ele) {
		return "extnamopt";
	}
	
	String text(colonwith ele) {
//		String m_colon = ele.getM_colon();
//		if (m_colon != null) {
//			return m_colon;
//		}
//		
//		
		return "fun type: colonwith";
	}

	String text(d0argseq ele) {
		return "args: d0argseq";
	}

	String text(d0arg ele) {
		return "d0arg";
	}

	String text(d0arg_dyn ele) {
		return "d0arg_dyn";
	}

	String text(d0arg_sta ele) {
		return "d0arg_sta";
	}

	String text(p0argseq ele) {
		return "p0argseq";
	}

	String text(commap0argseq ele) {
		return "commap0argseq";
	}

	String text(d0ecarg ele) {
		return "d0ecarg";
	}

	String text(s0quaseq ele) {
		return "s0quaseq";
	}
	
	String text(s0qua ele) {
		return "s0qua";
	}
	
	String text(s0exp ele) {
		return "s0exp";
	}
	
	String text(commasi0deseq ele) {
		return "commasi0deseq";
	}
	
	String text(s0rtext ele) {
		return "s0rtext";
	}
	
	
	
	
	
	
	
	/*
	 * //Labels and icons can be computed like this:
	 * 
	 * String image(MyModel ele) { return "MyModel.gif"; }
	 */
}
